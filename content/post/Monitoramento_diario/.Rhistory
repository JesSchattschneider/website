library(sf)
library(mapview)
getwd()
ff <- as.list(list.files(path=".", pattern="linha.shp$", recursive=TRUE, full.names=TRUE))
open_shp <- function(ff){
linha <- read_sf(ff[i])
linha
}
linhas <- list()
for (i in 1:length(ff)) {
linhas[[i]] <- open_shp(ff)
}
merged.lines <- do.call(rbind, linhas)
st_write(merged.lines,"./merged_lines.shp")  ## saving the shp
merged.lines<-st_read("./merged_lines.shp") ## openning it
n<-diff(st_bbox(merged.lines)[c(2, 4)])/20  ## calculate the latitude area for 20 sectors
## CHANGE THE NUMBER HERE IF YOU WANT A MORE REFINED ANALYSIS!!
m<-diff(st_bbox(merged.lines)[c(1, 3)])     ## calculate the total longitudinal area monitored
## create 20 latitudinal sectors based on merged.lines extend
sectors<-st_make_grid(merged.lines, cellsize = c(m,n)) ## create 20 latitudinal sectors based on merged.lines extend
### Set the correct spatial attributes for "sectors" layer:
sectors = st_sf(sectors)                                ## define sectors as  single feature
sectors$id <- 1:nrow(sectors)                           ## create an identifier for each sector
sectors <- sectors %>% st_cast("MULTIPOLYGON")          ## define sectors as a multipolygon feature
mapview(sectors,zcol="id")                              ## view the sectors categorized by id
## create a multiline feature based on "sectors" id limits:
sectors_lines <- st_cast(sectors, "MULTILINESTRING", group_or_split = FALSE)
mapview(sectors_lines)
line_intersection_join <- st_intersection(merged.lines,sectors) ## calculate the intersection and adding the
## id sector for each segmented line
line_intersection_join<-line_intersection_join %>% st_cast("LINESTRING")        ## define each line segment as an unique feature
line_intersection_join$uid <- 1:nrow(line_intersection_join)                    ## add an id
mapview(line_intersection_join)+sectors_lines                                   ## view the product
line_intersection_join$length <- st_length(line_intersection_join)
mapview(line_intersection_join, zcol="length")+sectors_lines
library(sf)
library(mapview)
getwd()
# create a list with all subdirectories containing the shapefiles:
ff <- as.list(list.files(path=".", pattern="linha.shp$", recursive=TRUE, full.names=TRUE))
## Function to open the shps in subdirectories
open_shp <- function(ff){
linha <- read_sf(ff[i])
linha
}
linhas <- list()
for (i in 1:length(ff)) {
linhas[[i]] <- open_shp(ff)
}
# Merge all monitoring lines in one shapefile
merged.lines <- do.call(rbind, linhas)
st_write(merged.lines,"./merged_lines.shp")  ## saving the shp
merged.lines<-st_read("./merged_lines.shp") ## openning it
mapview(merged.lines)
n<-diff(st_bbox(merged.lines)[c(2, 4)])/20  ## calculate the latitude area for 20 sectors
## CHANGE THE NUMBER HERE IF YOU WANT A MORE REFINED ANALYSIS!!
m<-diff(st_bbox(merged.lines)[c(1, 3)])     ## calculate the total longitudinal area monitored
sectors<-st_make_grid(merged.lines, cellsize = c(m,n)) ## create 20 latitudinal sectors based on merged.lines extend
sectors = st_sf(sectors)                                ## define sectors as  single feature
sectors$id <- 1:nrow(sectors)                           ## create an identifier for each sector
sectors <- sectors %>% st_cast("MULTIPOLYGON")          ## define sectors as a multipolygon feature
mapview(sectors,zcol="id")                              ## view the sectors categorized by id
st_write(sectors,"./sectors.shp")  ## saving the sectors as a .shp
sectors_lines <- st_cast(sectors, "MULTILINESTRING", group_or_split = FALSE)
mapview(sectors_lines)
line_intersection_join <- st_intersection(merged.lines,sectors) ## calculate the intersection and adding the
## id sector for each segmented line
line_intersection_join<-line_intersection_join %>% st_cast("LINESTRING")        ## define each line segment as an unique feature
line_intersection_join$uid <- 1:nrow(line_intersection_join)                    ## add an id
mapview(line_intersection_join)+sectors_lines                                   ## view the product
line_intersection_join$length <- st_length(line_intersection_join)
mapview(line_intersection_join, zcol="length")+sectors_lines
mapview(sectors_lines)
x = st_sf(merged.lines)
mapview(x)
mapview(line_intersection_join, zcol="length")+sectors_lines
View(sectors)
teste <- ddply(line_intersection_join, "id", summarise, tot=sum(length))
library(tidyverse)
teste <- ddply(line_intersection_join, "id", summarise, tot=sum(length))
library(plyr)
teste <- ddply(line_intersection_join, "id", summarise, tot=sum(length))
View(teste)
mapview(teste)
joined_grid=st_join(line_intersection_join, teste)
joined_sector<-merge(line_intersection_join, teste, by="id",all.x=TRUE)
mapview(joined_sector)
joined_sector<-merge(sectors, teste, by="id",all.x=TRUE)
mapview(joined_sector)
mapview(joined_sector, zcol="tot")
mapview(line_intersection_join, zcol="length")+sectors_lines
mapview(joined_sector, zcol="tot")
sector_monit_length <- ddply(line_intersection_join, "id", summarise, tot=sum(length))
sectors<-merge(sectors, sector_monit_length, by="id",all.x=TRUE) ## update the "sector" layer
mapview(sectors, zcol = "lenght") + line_intersection_join
mapview(sectors, zcol = "length") + line_intersection_join
sector_monit_length <- ddply(line_intersection_join, "id", summarise, tot_monitored_lenght=sum(length))
n<-diff(st_bbox(merged.lines)[c(2, 4)])/20  ## calculate the latitude area for 20 sectors
## CHANGE THE NUMBER HERE IF YOU WANT A MORE REFINED ANALYSIS!!
m<-diff(st_bbox(merged.lines)[c(1, 3)])     ## calculate the total longitudinal area monitored
## create 20 latitudinal sectors based on merged.lines extend
sectors<-st_make_grid(merged.lines, cellsize = c(m,n)) ## create 20 latitudinal sectors based on merged.lines extend
### Set the correct spatial attributes for "sectors" layer:
sectors = st_sf(sectors)                                ## define sectors as  single feature
sectors$id <- 1:nrow(sectors)                           ## create an identifier for each sector
sectors <- sectors %>% st_cast("MULTIPOLYGON")          ## define sectors as a multipolygon feature
sector_monit_length <- ddply(line_intersection_join, "id", summarise, tot_monitored_lenght=sum(length))
sectors<-merge(sectors, sector_monit_length, by="id",all.x=TRUE) ## update the "sector" layer
mapview(sectors, zcol = "tot") + line_intersection_join
mapview(sectors, zcol = "tot_monitored_lenght") + line_intersection_join
View(sectors)
rm(list = ls())
library(sf)
## install.packages("sf")
library(mapview)
## install.packages("mapview")
library(plyr)
getwd()
## 01 - OPEN DATA AND MERGE ALL SHAPEFILES INTO ONE ####
# create a list with all subdirectories containing the shapefiles:
ff <- as.list(list.files(path=".", pattern="linha.shp$", recursive=TRUE, full.names=TRUE))
## Function to open the shps in subdirectories
open_shp <- function(ff){
linha <- read_sf(ff[i])
linha
}
## A looping creating a list with all shapefiles
linhas <- list()
for (i in 1:length(ff)) {
linhas[[i]] <- open_shp(ff)
}
# Merge all monitoring lines in one shapefile
merged.lines <- do.call(rbind, linhas)
st_write(merged.lines,"./merged_lines.shp")  ## saving the shp
merged.lines<-st_read("./merged_lines.shp") ## openning it
x = st_sf(merged.lines)
## 02 - CREATE A NEW SPATIAL FEATURE BASED ON 20 LATITUDINAL SECTORS ####
## Find the total costal strip monitored
n<-diff(st_bbox(merged.lines)[c(2, 4)])/20  ## calculate the latitude area for 20 sectors
## CHANGE THE NUMBER HERE IF YOU WANT A MORE REFINED ANALYSIS!!
m<-diff(st_bbox(merged.lines)[c(1, 3)])     ## calculate the total longitudinal area monitored
## create 20 latitudinal sectors based on merged.lines extend
sectors<-st_make_grid(merged.lines, cellsize = c(m,n)) ## create 20 latitudinal sectors based on merged.lines extend
### Set the correct spatial attributes for "sectors" layer:
sectors = st_sf(sectors)                                ## define sectors as  single feature
sectors$id <- 1:nrow(sectors)                           ## create an identifier for each sector
sectors <- sectors %>% st_cast("MULTIPOLYGON")          ## define sectors as a multipolygon feature
mapview(sectors,zcol="id")                              ## view the sectors categorized by id
## create a multiline feature based on "sectors" id limits:
sectors_lines <- st_cast(sectors, "MULTILINESTRING", group_or_split = FALSE)
mapview(sectors_lines)
## 03 - LOOK FOR INTERSECTION BETWEEN THE 20 SECTORS AND ALL MONITORED LINES, CUT IN THIS POINT AND CALCULATE THE SEGMENT LENGTH ####
# calculating intersection between merged.lines and the individual sectors
line_intersection_join <- st_intersection(merged.lines,sectors) ## calculate the intersection and adding the
## id sector for each segmented line
line_intersection_join<-line_intersection_join %>% st_cast("LINESTRING")        ## define each line segment as an unique feature
line_intersection_join$uid <- 1:nrow(line_intersection_join)                    ## add an id
mapview(line_intersection_join)+sectors_lines                                   ## view the product
## Calculate individual segment lengths
line_intersection_join$length <- st_length(line_intersection_join)
mapview(line_intersection_join, zcol="length")+sectors_lines
## Add the total monitored length for each sector
sector_monit_length <- ddply(line_intersection_join, "id", summarise, tot_monitored_lenght=sum(length))
sectors<-merge(sectors, sector_monit_length, by="id",all.x=TRUE) ## update the "sector" layer
mapview(sectors, zcol = "tot_monitored_lenght") + line_intersection_join  ## view the final product
st_write(sectors,"./sectors.shp")  ## saving the sectors as a .shp
